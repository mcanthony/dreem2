<tree id="treemodel" multipleselection="false"
  y="28" selectcolor="${config.selection_color}"
  disabled="${!editor.editmode}"
>
  <handler name="updateSelection" event="onselected" args="view" reference="selectionmanager">
    if (view) {
      // Map inner view to root since the inner view is what allows editing of
      // the root view for the screen.
      if (view === editor.content_bg.content.inner) view = view.getRoot();
      
      // Select in tree
      var viewId = view.id;
      if (viewId) {
        if ((function walk(v) {
          if (v.data && v.data.id === viewId) {
            if (!v.selected) v.triggerSelection(true);
            return true;
          }
          var svs = v.subviews, i = svs.length;
          while (i) {
            if (walk(svs[--i])) return true;
          }
          return false;
        })(this)) return;
      }
    }
    
    this.clearSelection();
  </handler>

  <method name="selectHandler" args="sel, d">
    var viewid = d.id;
    if (viewid) {
      if (sel) {
        var view = this._getEditable(viewid);
        if (view !== selectionmanager.selected) selectionmanager.select(view);
      } else {
        selectionmanager.select(null);
      }
    }
  </method>

  <method name="_getEditable" args="id">
    return dr.sprite.retrieveGlobal(id);
  </method>

  <handler event="onmodelchange" reference="editormodel">
    // Reload tree
    var d = editormodel.model;
    if (d) {
      var model = [],
        screenname = editormodel.screenname,
        self = this;
      
      (function parser(m, o) {
        // if we're at the root node, so parse down through until we find the
        // screen with a matching name
        if (o.tag == '$root') {
          for (var i=0; o.child.length > i; i++) {
            var composition = o.child[i];
            if (composition.tag == 'composition') {
              for (var j=0; composition.child.length > j; j++) {
                var screens = composition.child[j];
                if (screens.tag == 'screens') {
                  o = screens.child;
                  for (var h=0; o.length > h; h++) {
                    var screen = o[h];
                    if (screen.tag == 'screen' && screen.attr && screen.attr.name == screenname) {
                      o = screen.child;
                      break;
                    }
                  }
                  break;
                }
              }
              break;
            }
          }
        }
        
        // for each child, build a normalized representation of the object 
        // that looks like { title:'foo', image:imageid, id:'editor_id', items:[child,ren]}
        var title, name, id, scr, tag, attr, img, object, s = 0, len = o.length;
        for (; len > s;) {
          scr = o[s++];
          tag = scr.tag;
          if (tag && tag[0] != '$') {
            title = name = id = '';
            attr = scr.attr;
            img = config.img_root;
            if (["text", "bitmap", "replicator", "dataset"].indexOf(tag) >= 0) {
              img += tag + '.png';
            } else {
              img += 'view.png';
            }
            
            if (attr) {
              id = attr.id;
              
              if (attr.title) {
                name = attr.title
              } else if (attr.name) {
                name = attr.name;
              } else if (attr.event) {
                name = attr.event;
              } else if (attr.text) {
                name = '"' + attr.text + '"';
              }
            }
            
            title = name ? name : tag.charAt(0).toUpperCase() + tag.slice(1);
            
            object = {title:title, image:img};
            if (id) object.id = id;
            if (scr.child) {
              var items = [];
              parser(items, scr.child);
              if (items.length) object.items = items;
            }
            
            // Keep all child nodes that are not layouts or behaviors.
            if (id) {
              var view = self._getEditable(id);
              if (view && !view.isA(dr.Layout) && !view.isA(dr.behavior.behavior)) m.push(object);
            }
          }
        }
      })(model, d);
      
      this.setAttribute('data', model);
      
      // Update the selection after model changes since the selection will
      // get cleared.
      var selected = selectionmanager.selected;
      if (selected) this.updateSelection(selected);
    }
  </handler>
</tree>
